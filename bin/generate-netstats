#! /usr/local/bin/bash
# designed to give some brief stats about the current output of netstat -n, 
# whittled down to two fields:
# 17.103.182.139.55091 FIN_WAIT_2
# this will generate an IP count for each line of output

PORT_NUM="80"
TMP_FILE=~/tmp/netstat.$$.out
OUT_FILE=~/tmp/netstat-ipcount.$$.txt

usage () {
	echo "Generate stats for ips on a port (default $PORT_NUM) filtered from netstat -n"
	echo "Usage - `basename $0` [-i /path/to/netstat.out] [-p port #]"
	echo "	-i	input file to analyze"
	echo "		assumes at least IP address appears in file; other args ignored"
	echo "	-p	port# to filter netstat output for"
	echo "	-v	be verbose"
	echo "	-s	sort the output by occurrence of IP address, descending"
	echo "	-h	show this help"
}

# grab our args
while getopts "i:p:vqsh" OPTS
do
	case $OPTS in
		i ) INPUT_FILE=$OPTARG ;;
		p ) PORT_NUM=$OPTARG ;;
		v ) VERBOSE='yes' ;;
		q ) QUIET='yes' ;;
		s ) SORT='yes' ;;
		h ) usage
			exit 0 ;;
	esac
done
# grab everything after the flags
shift $(($OPTIND - 1))
if [ ! -z "$1" ]
then
	usage
	exit 1
fi

# get some stats
if [ -n "$INPUT_FILE" -a -e "$INPUT_FILE" ]
then
	# use the file we got
	if [ -n "$VERBOSE" ]
	then
		echo "using file $INPUT_FILE"
	fi
	UNIQUE_IPS=`egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}' $INPUT_FILE | sort | uniq`
	PROC_FILE=$INPUT_FILE
else
	# get current netstat output
	/usr/bin/netstat -n | egrep "70\.182\.194\.[0-9]+\.$PORT_NUM" | awk '{print $5" "$6}' | sort -n > $TMP_FILE
	UNIQUE_IPS=`egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}' $TMP_FILE | sort | uniq`
	PROC_FILE=$TMP_FILE
fi

#echo "writing to tmp file $TMP_FILE"

IPS=( `echo -n $UNIQUE_IPS` )

# see what we got
if [ -z "$UNIQUE_IPS" ]
then
	# WTF??
	if [ -n "$VERBOSE" ]
	then
		echo "Empty output for \$UNIQUE_IPS"
	fi
	exit 2
else
	for ip in "${IPS[@]}"
	do
		echo -n "$ip " >> $OUT_FILE
		egrep -c $ip $PROC_FILE >> $OUT_FILE
	done
	#echo `echo $UNIQUE_IPS | wc`
fi

# sort them bitches on command
if [ -n "$SORT" ]
then
	# barrrrf
	if [ -n "$QUIET" ]
	then
		cat $OUT_FILE | awk '{print $2" "$1}' | sort -nr | awk '{print $1" "$2}'
	else
		cat $OUT_FILE | awk '{print $2" "$1}' | sort -nr | awk '{print $1" instance(s) of "$2}'
	fi
else
	cat $OUT_FILE
fi

# delete the temp file(s)
if [ -e "$TMP_FILE" ]
then
	if [ -n "$VERBOSE" ]
	then
		echo "removing TMP_FILE $TMP_FILE..."
	fi
	rm $TMP_FILE
fi
if [ -e "$OUT_FILE" ]
then
	if [ -n "$VERBOSE" ]
	then
		echo "removing OUT_FILE $OUT_FILE..."
	fi
	rm $OUT_FILE
fi

if [ -n "$VERBOSE" ]
then
	echo "done!"
fi
